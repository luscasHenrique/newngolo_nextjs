// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Certifique-se de que a URL de conexão com o banco de dados esteja no .env
}

enum Role {
  ADMIN
  SUPERADMIN
  EDITOR
  SELLER
  VIEWER
}

model User {
  id            String   @id @default(uuid()) 
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  phone         String?
  role          Role     @default(VIEWER)
  is_active     Boolean  @default(true)
  bio           String?
  last_login    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  products      Product[]
  sales         Sale[]
  stockLogs     StockLog[]

  @@map("user")
}

model Session {
  id                    String   @id @default(uuid())
  expiresAt             DateTime
  token                 String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String  // Alterado para String, pois userId é String
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String   @id @default(uuid())
  accountId             String
  providerId            String
  userId                String  // Alterado para String, pois userId é String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String? // Campo para armazenar a senha do usuário
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())

  @@map("verification")
}

model Product {
  id          String   @id @default(uuid())
  qrcode      String
  name        String
  price       Decimal  @db.Decimal(10, 2)
  company     String
  description String?
  details     String?
  quantity    Int
  category    String
  imgUrl      String?
  isActive    Boolean  @default(true)
  status      String
  userId      String  // Alterado para String, pois userId é String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?
  user        User     @relation(fields: [userId], references: [id])
  images      ProductImage[]
  sales       Sale[]
  stockLogs   StockLog[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String  // Alterado para String
  imageUrl  String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model Sale {
  id           String   @id @default(uuid())
  productId    String  // Alterado para String
  userId       String  // Alterado para String
  quantity     Int
  totalValue   Decimal @db.Decimal(10, 2)
  status       String
  stockAfterAction Int
  createdAt    DateTime @default(now())
  product      Product  @relation(fields: [productId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@map("sales")
}

model StockLog {
  id            String   @id @default(uuid()) // Alterado para String
  productId     String  // Alterado para String
  userId        String  // Alterado para String
  changeValue   Int
  currentQuantity Int
  timestamp     DateTime @default(now())
  description   String?
  status        String
  totalValue    Decimal @db.Decimal(10, 2)
  updatedValue  Decimal @db.Decimal(10, 2)
  product       Product  @relation(fields: [productId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@map("stock_log")
}
